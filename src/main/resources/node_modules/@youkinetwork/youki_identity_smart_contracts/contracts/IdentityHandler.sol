// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;
import "./IdentityHandlerStorage.sol";
import "./IdentityHandlerLogic.sol";

contract IdentityHandler  {

    IdentityHandlerStorage identityHandlerStorage; 
    IdentityHandlerLogic identityHandlerLogic;

    // *** events ***
    event newIdentityDeployed(address identityAddress, address owner);

    constructor(address _storageAddress ,address _logicAddress ){
        identityHandlerStorage = IdentityHandlerStorage(_storageAddress);
        identityHandlerLogic = IdentityHandlerLogic(_logicAddress);
    }
    
    function deployNewIdentity(IdentityDTO memory dto) 
    external{

        if (CheckingLib.walletExists(dto.walletAddress, identityHandlerStorage.getAllWallets())) {
            revert("deployment failed0");
        }
        if (CheckingLib.emailExists(dto.email, identityHandlerStorage.getAllEmails())) {
            revert("deployment failed1");
        }

        YoukiIdentity newYoukiIdentity = identityHandlerLogic.createNewIdentity(dto);

        if (address(newYoukiIdentity) == address(0)) {
            revert("deployment failed2");
        }
        else { 
            identityHandlerStorage.storeIdentityByWallet(dto.walletAddress, address(newYoukiIdentity));
            identityHandlerStorage.storeIdentityByEmail(keccak256(abi.encodePacked(dto.unhashedEmail)), address(newYoukiIdentity));
            identityHandlerStorage.storeIdentityByEmailWallet(keccak256(abi.encodePacked(dto.unhashedEmail)), dto.walletAddress, address(newYoukiIdentity));
            identityHandlerStorage.storeNewEmail(keccak256(abi.encodePacked(dto.unhashedEmail)));
            identityHandlerStorage.storeNewWallet(dto.walletAddress);
            emit newIdentityDeployed(address(newYoukiIdentity), newYoukiIdentity.owner());
        }
    }
}
