// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;
import "./YoukiIdentity.sol";
import "./DTO/IdentityDTO.sol";

contract IdentityHandlerStorage {

    address[] private wallets; //store user wallet addresses which are used to check if a user have an account
    bytes32[] private emails; //store user emails  which are used to check if a user have an account
    address[] private identities; //store user wallet addresses which are used to check if a user have an account

    mapping(address => address) private walletIdentityMapping; // map wallet address to the identities contracts
    mapping(bytes32 => address) private emailIdentityMapping; // map emails to wallet addresses  TODO: improve and take it foo u can use email list to check if it exist or not
    mapping(bytes32 => mapping(address => address))
        private emailWalletIdentityMApping;
    
    mapping(address=>address[]) private allowedToAccessIdentity;

    // *** getter Methods ***
    function getWallet(uint256 _index) external view returns (address) {
        return wallets[_index];
    }

    function getEmail(uint256 _index) external view returns (bytes32) {
        return emails[_index];
    }

    function getIdentity(uint256 _index) external view returns (address) {
        return identities[_index];
    }

    function getAllWallets() public view returns(address[] memory) {
        return wallets;
    }

    function getAllEmails() public view returns (bytes32[] memory) {
        return emails;
    }

    function getIdentityByEmail(bytes32 _email) public view returns (address) {
        return emailIdentityMapping[_email];
    }

    function getIdentityByWallet(address _wallet)
        public
        view
        returns(address)
    {
        return walletIdentityMapping[_wallet];
    }

    function getAllowedToAccessIdentity(address _identity)
        public 
        view
        returns(address[]memory){
            return allowedToAccessIdentity[_identity];
    }

    // *** storage Methods ***

    function storeIdentityByWallet(address _wallet, address _identity)
        external
    {
        walletIdentityMapping[_wallet] = _identity;
    }

    function storeIdentityByEmail(bytes32 _email, address _identity) external {
        emailIdentityMapping[_email] = _identity;
    }

    function storeIdentityByEmailWallet(
        bytes32 _email,
        address _wallet,
        address _identity
    ) external {
        emailWalletIdentityMApping[_email][_wallet] = _identity;
    }

    function storeNewEmail(bytes32 _email) external {
        emails.push(_email);
    }

    function storeNewWallet(address _wallet) external {
        wallets.push(_wallet);
    }
}
